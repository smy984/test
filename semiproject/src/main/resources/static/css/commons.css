@charset "UTF-8";


.logo{
	text-decoration: none;
	color: black;
	padding: 0 10px;
}

 /* 
    container는 작은 화면의 외부 영억을 관리하는 도구
    - 폭 조절과 가운데 배치를 할 수 있어야 한다.
    - css에서는 계산식이 모든 브라우저에서 작동하지 않는다.
    - 미리 예상 가능한 크기를 준비해두면 편하게 쓸 수 있다.
*/
.container-300{width:300px; margin: 0 auto;}
.container-350{width:350px; margin: 0 auto;}
.container-400{width:400px; margin: 0 auto;}
.container-450{width:450px; margin: 0 auto;}
.container-500{width:500px; margin: 0 auto;}
.container-550{width:550px; margin: 0 auto;}
.container-600{width:600px; margin: 0 auto;}
.container-650{width:650px; margin: 0 auto;}
.container-700{width:700px; margin: 0 auto;}
.container-750{width:750px; margin: 0 auto;}
.container-800{width:800px; margin: 0 auto;}
.container-850{width:850px; margin: 0 auto;}
.container-900{width:900px; margin: 0 auto;}
.container-950{width:950px; margin: 0 auto;}
.container-1000{width:1000px; margin: 0 auto;}
.container-1050{width:1050px; margin: 0 auto;}
.container-1100{width:1100px; margin: 0 auto;}
.container-1150{width:1150px; margin: 0 auto;}
.container-1200{width:1200px; margin: 0 auto;}

/* 
    row는 container 내부에 배치될 도구들이 위치할 자리에 해당한다.
    - 상하 margin만 부여하여 간격을 띄워준다.
*/
.row{
    margin: 10px 0px;
}

/* 
    row 내부에 위치하는 도구들의 폭을 설정
    - 폭을 row에 맞게 100%로 설정하거나 아니면 자신의 폭을 그대로 사용
    - 아무 표시도 하지 않으면 폭을 있는 그대로 두고 클래스를 부여하면 100%로 변경
*/
.w-100{
    width: 100%;
}
.w-50{
    width: 50%;
}
.w-33{
    width: 33%;
}
.w-34{
    width: 34%;
}
.w-25{
    width: 25%;
}

/* 
    어차피 정렬은 left, centet, right밖에 없다.
*/
.left{text-align: left;}
.center{text-align: center;}
.right{text-align: right;}

/* 
    margin은 간격을 벌리기 위해서 사용한다.
    어떨 때는 12px, 어떨 때는 17px과 같이 부여하면 일관성이 떨어진다.
    표준화된 margin 부여가 가능하도록 스타일을 설정
    - mt(margin-top), mb(margin-bottom), ms(margin-start), me(margin-end)
*/
.mt-10{margin-top: 10px;}
.mt-20{margin-top: 20px;}
.mt-30{margin-top: 30px;}
.mt-40{margin-top: 40px;}
.mt-50{margin-top: 50px;}

.mb-10{margin-bottom: 10px;}
.mb-20{margin-bottom: 20px;}
.mb-30{margin-bottom: 30px;}
.mb-40{margin-bottom: 40px;}
.mb-50{margin-bottom: 50px;}

.ms-10{margin-left: 10px;}
.ms-20{margin-left: 20px;}
.ms-30{margin-left: 30px;}
.ms-40{margin-left: 40px;}
.ms-50{margin-left: 50px;}

.me-10{margin-right: 10px;}
.me-20{margin-right: 20px;}
.me-30{margin-right: 30px;}
.me-40{margin-right: 40px;}
.me-50{margin-right: 50px;}

/* 
    버튼은 3가지 역할이 있다고 보고 디자인한다.
    - 긍정버튼 : 현재의 작업을 완성시키는 버튼
    - 중립버튼 : 현재의 작업과 상관없는 다른 작업과 연결된 버튼
    - 부정버튼 : 현재의 작업이 위험함을 알리거나 부정적인 효과를 처리하는 버튼
*/
.btn{
    font-size: 16px;
    padding: 0.75em;
    border: none;
    cursor: pointer;

    /* a 태그를 버튼으로 만들기 위해 추가 */
    display: inline-block;
    text-align: center;
    text-decoration: none;
}
.btn.btn-positive{
    background-color: #2980b9;
    color: white;
}
.btn.btn-positive:hover{
    background-color: #2473a6;
}
.btn.btn-neutral{
    background-color: white;
    color: gray;
    border: 1px solid gray;
}
.btn.btn-neutral:hover{
    border: 1px solid black;
    color: black;
}
.btn.btn-negative{
    background-color: #ecf0f1;
    color: gray;
}
.btn.btn-negative:hover{
    background-color: #d0dadc;
}

/* 
    입력창은 버튼과 같이 등장하므로 비율이나 크기 등이 같아야 한다.
*/
.input{
    outline: none;
    font-size: 16px;
    padding: 0.75em;
    border: 1px solid gray;
}
.input:focus{
    border-color: black;
}

/* 
    input이라는 클래스가 있으면서 input-underline이라는 클래스가 있다면
*/
.input.input-underline{
    border: none;
    border-bottom: 1px solid gray;
}
.input.input-underline:focus{
    border-color: black;
}

/* 
    배경 이미지가 들어가는 입력창
*/
.input.input-icon{
    padding-left: 2.5em;
    /* background-image: url("./image/search.png"); 쓸 때 넣으면 됨*/
    background-size: 1em;
    background-repeat: no-repeat;
    background-position-x: 0.75em;
    background-position-y: center;
}

/* 
    textarea는 기본적으로 폭 조절이 가능하여 디자인에 어려움이 많다.
    - 높이만 조절되게 하든가
    - 아예 조절이 안 되게 하든가
    - resize 속성
*/
textarea.input{/*textarea 중 input class인 것만*/
    resize: vertical;
}
textarea.input.fix-size{/*textarea는 class가 아니니까*/
    resize: none;
}

/* 
    테이블 디자인
    - 테이블은 기본 디자인이 너무 많아서 디자인하기 까다로운 태그 중 하나
*/
.table{
border-collapse: collapse;/* 테두리 병합 */
width: 100%;
font-size: 16px;
/* 똑같은데 쓰는 이유 : 바깥에서 바꿔도 영향을 안 받음 */
}

/* 
    방법 1 : .table 안에 있는 모든 th와 td를 선택(후손선택자)
    선택자 쓸 때 띄어쓰지 말라했던 이유 : 띄어쓰면 안에 있는 모든 것이라는 뜻
    - 내부에 있는 모든 요소를 선택하므로 테이블이 중첩되는 경우 문제가 발생
*/
.table th, 
.table td{
    /* border: 1px solid black; */
}

.table a{
	text-decoration: none;
	color: black;
}

/* 
    방법 2 : .table부터 시작하는 모든경로를 제시하여 th와 td를 선택(자식선택자)
    부등호가 직계 자식을 선택한다는 뜻
*/
.table > thead > tr > th, 
.table > thead > tr > td, 
.table > tbody > tr > th, 
.table > tbody > tr > td, 
.table > tfoot > tr > th, 
.table > tfoot > tr > td {
    padding: 0.3em;
    /* em은 꼭 글자 사이즈 주고 써야됨 */
}

/* 
    확장 스타일 : 테두리가 있는 테이블
*/
.table.table-border{
    border: 1px solid gray;
}
.table.table-border > thead > tr > th, 
.table.table-border > thead > tr > td, 
.table.table-border > tbody > tr > th, 
.table.table-border > tbody > tr > td, 
.table.table-border > tfoot > tr > th, 
.table.table-border > tfoot > tr > td {
    border: 1px solid gray;
}

/* 
    확장 스타일 : 줄무늬 테이블
*/
.table.table-stripe > thead > tr, 
.table.table-stripe > tbody > tr:nth-child(2n) {
    background-color: rgb(243, 247, 252);
}

/* 
    확장 스타일 : 마우스에 반응하는 테이블
*/
.table.table-hover > thead > tr:hover, 
.table.table-hover > tbody > tr:hover, 
.table.table-hover > tfoot > tr:hover {
    background-color: rgb(243, 247, 252);
}

/* 
    확장 스타일 : 옆이 뚫린 테이블
*/
.table.table-slit {
    border: 2px solid gray;
    border-left: none;
    border-right: none;
}
.table.table-slit > thead {
    border-bottom: 1px solid gray;
}
.table.table-slit > tfoot {
    border-top: 1px solid gray;
}

/* 
    이미지 디자인
*/
.image {
    border: 1px solid transparent;
    /*사진에 영향을 주지 않는 투명 테두리 영역 설정*/
}
.image.image-hover:hover, 
.image.image-frame {
    border: 1px solid black;
}
.image.image-blur {
    /* opacity는 불투명도이며 0부터 1까지 설정 가능하다. */
    opacity: 0.6;
}
.image.image-blur:hover {
    opacity: 1;
}
.image.image-shadow {
    /* box-shadow 속성*/
    /* - box-shadow : 우측위치 하단위치 번짐정도 확장정도 색상*/
    /* box-shadow: 5px 5px 0px 0px black; */
    box-shadow: 0px 0px 5px 0px black;
    /* box-shadow: 0px 0px 0px 5px black; */
}
.image.image-round {
    border-radius: 10px;
}
.image.image-circle {
    border-radius: 50%;
}
.image.image-leaf {
    border-top-left-radius: 50%;
    border-bottom-right-radius: 50%;
}

/* 
    Pagination 디자인
    - ul 혹은 ol을 개조하여 구조를 설계
*/
ul.pagination {
    list-style: none;
    margin: 0;
    padding: 0;
    font-size: 16px;
    color: gray;
    text-align: center;
}
ul.pagination > li {
    display: inline-block;
    border: 1px solid transparent;
    padding: 0.5em;
    line-height: 1em;/*글자 표시 높이 설정*/
    min-width: 2em;
    text-align: center;
    cursor: pointer;
}
ul.pagination > li.on, 
ul.pagination > li:hover {
    border: 1px solid gray;
    color: black;
}

/* 
    확장 스타일 : 글자 크기를 다르게 하여 다양한 크기 옵션을 제공
*/
ul.pagination.pagination-big {
    font-size: 1.25em;
}
ul.pagination.pagination-small {
    font-size: 0.75em;
}
ul.pagination > li > a {
    display: block;
    width: 100%;
    color: inherit;/* 상속 */
    text-decoration: none;
}

/* 
    사용자가 화면을 클릭할 수 없도록 만드는 도구
    - position을 fixed로 설정하여 브라우저를 기준으로 위치를 설정
    - 모든 위치를 0으로설정하거나 폭 높이를 100%로 설정하여 화면에 가득 채움
    - 약간 어둡게 하여 뒤가 비치도록 구현하는 방법
        (1) opacity 이용 - 내용물까지 투명해짐
        (2) background color를 rgba로 설정하는 방법 - 내용물에는 영향 없음
*/
.fullscreen {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    position: fixed;

    /* background-color: black;
    opacity: 50%; */

    background-color: rgba(0, 0, 0, 0.5);
}
.screen-center {
    position: absolute;

    /* 중앙에 배치 */
    top: 50%;
    left: 50%;

    /* 방법 1 : 마진을 이용하여 좌측 상단으로 이동(크기를 알아야 함)
    margin-left: -200px;
    margin-top: -200px; */

    /* 방법 2 : transform 속성을 이용하여 영역을 비율로 이동(크기 몰라도 됨) */
    transform: translate(-50%, -50%);
}

/* 
    메뉴 전체 마진, 패딩 값 0 & 리스트 스타일 없애기
*/
.dropdown-menu, 
.dropdown-menu ul{
    margin: 0;
    padding: 0;
    list-style: none;
}

.dropdown-menu{
    font-size: 15px;
    position: relative;
}

/* 
드롭다운메뉴 직속 li태그(1 번째 메뉴) 
- 가로로 배치하고 크기 지정 가능하게 : inline-block
- dropdown-menu에 글자 크기 지정 후 0.5em 패딩값 부여
*/
.dropdown-menu > li{
    display: inline-block;
    width: 100px;
    position: relative;
    padding: 0.5em;
}
.dropdown-menu ul > li{
    padding: 0.3em;
}

/* 
    드롭다운메뉴 2 번째 이상 메뉴 전체
    - 평소에는 안 보이게 해놓고 hover 사용으로 나타나게 하기
*/
.dropdown-menu ul{
    position: absolute;
    top: 100%;
    left: 0;
    display: none;
    width: 100%;
    background-color: rgba(255, 255, 255, 0.9);
}
.dropdown-menu li:hover > ul{
    display: block;
}

/* 
    드롭다운메뉴 내 링크에 대한 설정
*/
.dropdown-menu a{
    display: block;
    text-align: center;
    text-decoration: none;
    color: rgb(100, 100, 100);
    width: 100%;
}

/* 
    드롭다운메뉴 전체에 hover를 걸면 전체에 변경되는 설정
*/
.dropdown-menu li:hover{
/*     background-color: lightgray; */
}

/* 
    드롭다운메뉴 전체에 hover를 걸면 링크가 변경되는 설정
*/
.dropdown-menu li:hover > a{
    color: black;
}

.dropdown-menu > li:hover > ul{
	border-top: 1px solid gray;
}

/* 
    우측 고정 메뉴 설정
    - .dropdown-menu를 relative로 position값을 줘야 absolute 먹음
*/
.dropdown-menu > .right-menu{
    position: absolute;
    top: 0;
    right: 0;
}

/* 
    3 번째 메뉴는 우측으로 나오게 설정
*/
.dropdown-menu li{
    position: relative;
}
.dropdown-menu > li > ul ul{
    position: absolute;
    top: 0;
    left: 100%;
}

/* 
    우측 고정 메뉴는 3 번째 메뉴가 왼쪽으로 나오게 설정
*/
.dropdown-menu > li.right-menu > ul ul{
    position: absolute;
    top: 0;
    right: 100%;
    left: auto;
}

/* 
    스크롤을 내려도 위에 메뉴가 고정되는 효과
*/
.dropdown-menu.dropdown-menu-fixed{
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
}

/* 
    float 설정
    - float를 설정하면 현재 영역에서 left 혹은 right 방향에 붙는다.(ex 자석)
    - (문제점) 
        - float와 float가 아닌 요소들을 섞어서 배치할 때 문제가 발생
        - float가 float 아닌 영역에 포함되지 않는다.
    - (해결책)
        - float를 제거하는 속성인 clear를 float가 끝나는 시점에 사용한다.
        - clear 등장 이후부터는 float의 영향을 받지 않는다.
    - (최종 형태)
        - float는 필요하고, 다른 요소랑 어울리긴 힘드니 별도의 영억을 준비
        - 해당 영역(.float-container) 종료 시 자동으로 clear 되도록 처리
        - 가상 선택자(virtual selector)가 필요하다.
*/
.float-container{}
.float-container::after{
    content: "";
    display: block;
    /* float-container 끝 단에 빈 공백인 영역을 먼저 생성 */
    clear: both;
}

.float-left{
    float: left;
}
.float-right{
    float: right;
}

.flex{
	display: flex;
	direction: row;
}

.flex > div{
	flex-grow: 1;
	margin: 10px;
}

a:hover{
	cursor: pointer;
}
